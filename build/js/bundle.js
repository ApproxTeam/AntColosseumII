(function () {
'use strict';

function initSocket(url, onMessage, onOpen, onClose, onError)
{
    var webSocket = new WebSocket(url);
    webSocket.onmessage = onMessage;
    webSocket.onopen = onOpen;
    webSocket.onclose = onClose;
    webSocket.onerror = onError;
    return webSocket;
 }

const skeletonAppear = loadAnimateFrame("skeleton", "appear", 80, 10, 1);
const skeletonIdle = loadAnimateFrame("skeleton", "idle", 80, 6, 1);
const skeletonWalk = loadAnimateFrame("skeleton", "go", 80, 8, 1);
const skeletonAttack = loadAnimateFrame("skeleton", "hit", 80, 8, 1);
const skeletonDie = loadAnimateFrame("skeleton", "die", 80, 8, 1);

function getSkeletonSprite() {
  let skeleton = new PIXI.extras.AnimatedSprite(skeletonAppear);
  skeleton.scale.set(0.5, 0.5);
  skeleton.play();
  skeleton.loop = false;
  skeleton.idle = function() {
    skeleton.textures = skeletonIdle;
    skeleton.loop = true;
    skeleton.play();
  };
  skeleton.onComplete = skeleton.idle;


  return skeleton;
}

function initialiseGame() {
  let mainCanvas = document.getElementById("mainGame");
  let rendererOptions = {
    antialiasing: false,
    transparent: false,
    resolution: window.devicePixelRatio,
    autoResize: true,
  };
  let ratio = window.innerWidth / window.innerHeight;
  let app = new PIXI.Application(window.innerWidth, window.innerHeight, {view: mainCanvas}, rendererOptions);
  window.onresize = function(event) {
      resize(app.renderer, ratio);
  };
  let skeletonAppear$$1 = loadAnimateFrame("skeleton", "appear", 80, 10, 1);
  let skeleton = getSkeletonSprite();

  skeleton.interactive = true;

  skeleton.on('pointerdown', (event) => {
    skeleton.textures = skeletonAttack;
    skeleton.play();
    skeleton.loop = false;
    skeleton.onComplete = skeleton.idle;
  });
  skeleton.x = 300;
  skeleton.y = 300;
  app.stage.addChild(skeleton);
  app.ticker.add(function() {
  });
}

function loadAnimateFrame(assetFolder, assetPrefix, assetTime, assetMax, assetMin) {
  let frameSet = [];
  for (let i = assetMin; i <= assetMax; i++){
    let frame = {
        texture: PIXI.Texture.fromImage(`./assets/${assetFolder}/${assetPrefix}_${i}.png`),
        time: assetTime
    };
    frameSet.push(frame);
  }
  return frameSet;

}

function resize(renderer, ratio) {
    if (window.innerWidth / window.innerHeight >= ratio) {
        var w = window.innerHeight * ratio;
        var h = window.innerHeight;
    } else {
        var w = window.innerWidth;
        var h = window.innerWidth / ratio;
    }
    renderer.view.style.width = w + 'px';
    renderer.view.style.height = h + 'px';
}

const socketConfiguration = {
  url: "ws://approxteam.ddns.net:7777/OlympiaServer/game",
  onOpen: function(event) {
    initialiseGame();

  },
  onClose: function(event) {
    console.log(event);
  },
  onMessage: function(event) {
    console.log(event);
  },
  onError: function(event) {
    alert("Please try again later");
  }
};

$(document).ready(function() {
  var webSocket = initSocket(socketConfiguration.url,
    socketConfiguration.onMessage,
    socketConfiguration.onOpen,
    socketConfiguration.onClose,
    socketConfiguration.onError);
});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
