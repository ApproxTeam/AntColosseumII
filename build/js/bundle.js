var AntColosseum = (function (exports) {
'use strict';

function initSocket(url, onMessage, onOpen, onClose, onError)
{
    var webSocket = new WebSocket(url);
    webSocket.onmessage = onMessage;
    webSocket.onopen = onOpen;
    webSocket.onclose = onClose;
    webSocket.onerror = onError;
    return webSocket;
 }

const skeletonAppear = loadAnimateFrame("skeleton", "appear", 80, 10, 1);
const skeletonIdle = loadAnimateFrame("skeleton", "idle", 80, 6, 1);
const skeletonWalk = loadAnimateFrame("skeleton", "go", 80, 8, 1);
const skeletonAttack = loadAnimateFrame("skeleton", "hit", 80, 8, 1);
const skeletonDie = loadAnimateFrame("skeleton", "die", 80, 8, 1);

const antFrames = {
  idle : 3,
  walk: 7,
  attack: 7,
  die: 11
};

const helper = {};

const antTypes = {
  fireAnt : {
    leftIdle: loadAssetsforAnt("fireant", 70, antFrames.idle, true),
    left : loadAssetsforAnt("fireant", 70, antFrames.walk),
    leftAttack : loadAssetsforAnt("fireant", 70, antFrames.attack),
    leftDie: loadAssetsforAnt("fireant", 70, antFrames.die),
    leftUpIdle: loadAssetsforAnt("fireant", 70, antFrames.idle, true),
    leftUp: loadAssetsforAnt("fireant", 70, antFrames.walk),
    leftUpAttack: loadAssetsforAnt("fireant", 70, antFrames.attack),
    leftUpDie: loadAssetsforAnt("fireant", 70, antFrames.die),
    upIdle: loadAssetsforAnt("fireant", 70, antFrames.idle, true),
    up: loadAssetsforAnt("fireant", 70, antFrames.walk),
    upAttack: loadAssetsforAnt("fireant", 70, antFrames.attack),
    upDie: loadAssetsforAnt("fireant", 70, antFrames.die),
    rightUpIdle: loadAssetsforAnt("fireant", 70, antFrames.idle, true),
    rightUp: loadAssetsforAnt("fireant", 70, antFrames.walk),
    rightUpAttack: loadAssetsforAnt("fireant", 70, antFrames.attack),
    rightUpDie: loadAssetsforAnt("fireant", 70, antFrames.die),
    rightIdle: loadAssetsforAnt("fireant", 70, antFrames.idle, true),
    right: loadAssetsforAnt("fireant", 70, antFrames.walk),
    rightAttack: loadAssetsforAnt("fireant", 70, antFrames.attack),
    rightDie: loadAssetsforAnt("fireant", 70, antFrames.die),
    rightDownIdle: loadAssetsforAnt("fireant", 70, antFrames.idle, true),
    rightDown: loadAssetsforAnt("fireant", 70, antFrames.walk),
    rightDownAttack: loadAssetsforAnt("fireant", 70, antFrames.attack),
    rightDownDie: loadAssetsforAnt("fireant", 70, antFrames.die),
    downIdle: loadAssetsforAnt("fireant", 70, antFrames.idle, true),
    down: loadAssetsforAnt("fireant", 70, antFrames.walk),
    downAttack: loadAssetsforAnt("fireant", 70, antFrames.attack),
    downDie: loadAssetsforAnt("fireant", 70, antFrames.die),
    leftDownIdle: loadAssetsforAnt("fireant", 70, antFrames.idle, true),
    leftDown: loadAssetsforAnt("fireant", 70, antFrames.walk),
    leftDownAttack: loadAssetsforAnt("fireant", 70, antFrames.attack),
    leftDownDie: loadAssetsforAnt("fireant", 70, antFrames.die),

  },
  iceAnt : {
    leftIdle: loadAssetsforAnt("iceant", 70, antFrames.idle, true),
    left : loadAssetsforAnt("iceant", 70, antFrames.walk),
    leftAttack : loadAssetsforAnt("iceant", 70, antFrames.attack),
    leftDie: loadAssetsforAnt("iceant", 70, antFrames.die),
    leftUpIdle: loadAssetsforAnt("iceant", 70, antFrames.idle, true),
    leftUp: loadAssetsforAnt("iceant", 70, antFrames.walk),
    leftUpAttack: loadAssetsforAnt("iceant", 70, antFrames.attack),
    leftUpDie: loadAssetsforAnt("iceant", 70, antFrames.die),
    upIdle: loadAssetsforAnt("iceant", 70, antFrames.idle, true),
    up: loadAssetsforAnt("iceant", 70, antFrames.walk),
    upAttack: loadAssetsforAnt("iceant", 70, antFrames.attack),
    upDie: loadAssetsforAnt("iceant", 70, antFrames.die),
    rightUpIdle: loadAssetsforAnt("iceant", 70, antFrames.idle, true),
    rightUp: loadAssetsforAnt("iceant", 70, antFrames.walk),
    rightUpAttack: loadAssetsforAnt("iceant", 70, antFrames.attack),
    rightUpDie: loadAssetsforAnt("iceant", 70, antFrames.die),
    rightIdle: loadAssetsforAnt("iceant", 70, antFrames.idle, true),
    right: loadAssetsforAnt("iceant", 70, antFrames.walk),
    rightAttack: loadAssetsforAnt("iceant", 70, antFrames.attack),
    rightDie: loadAssetsforAnt("iceant", 70, antFrames.die),
    rightDownIdle: loadAssetsforAnt("iceant", 70, antFrames.idle, true),
    rightDown: loadAssetsforAnt("iceant", 70, antFrames.walk),
    rightDownAttack: loadAssetsforAnt("iceant", 70, antFrames.attack),
    rightDownDie: loadAssetsforAnt("iceant", 70, antFrames.die),
    downIdle: loadAssetsforAnt("iceant", 70, antFrames.idle, true),
    down: loadAssetsforAnt("iceant", 70, antFrames.walk),
    downAttack: loadAssetsforAnt("iceant", 70, antFrames.attack),
    downDie: loadAssetsforAnt("iceant", 70, antFrames.die),
    leftDownIdle: loadAssetsforAnt("iceant", 70, antFrames.idle, true),
    leftDown: loadAssetsforAnt("iceant", 70, antFrames.walk),
    leftDownAttack: loadAssetsforAnt("iceant", 70, antFrames.attack),
    leftDownDie: loadAssetsforAnt("iceant", 70, antFrames.die),
  }
};


function getAntSprite(antType) {
  let ant = new PIXI.extras.AnimatedSprite(antType.leftUpDie);
  ant.play();
  ant.loop = false;
  ant.idle = function() {
    ant.textures = antType[pickRandomProperty(antType)];
    ant.loop = true;
    ant.play();
  };
  ant.onComplete = ant.idle;


  return ant;
}

function pickRandomProperty(obj) {
    var result;
    var count = 0;
    for (var prop in obj)
        if (Math.random() < 1/++count)
           result = prop;
    return result;
}


function loadAssetsforAnt(antType, time, frames, viceVersa) {
  if(helper[antType] === undefined) {
    helper[antType] = 0;
  }
  let min = helper[antType];
  let max = min + frames;
  helper[antType] = max + 1;
  console.log(min + " " + max + " " + antType);
  if(viceVersa) {
    return loadAnimateFrame("ant/" + antType, antType, time, max, min, true);
  } else {
    return loadAnimateFrame("ant/" + antType, antType, time, max, min);
  }
}

function getSoundAsset(relativePath, name, loop, autoplay, onEnd) {
  return new Howl(
    {
      src: ["assets/sounds/" + relativePath + "/" + name],
      autoplay: autoplay,
      loop: loop,
      onend: onEnd
    }
  );
}

const preDefinedSounds = {
  entryOfGladiatorsEntry : getSoundAsset(".", "entry1.wav", false, false, function() {
    gameEventRecognizer("ENTRYEND");
  }),
  entryOfGladiatorLooped: getSoundAsset(".", "entry2.wav", true, false, null)

};

const gameGlobal = {
  app: initApplication(),
  soundsLoaded: false,
  loader: PIXI.loader,
};

function initApplication() {
  let mainCanvas = document.getElementById("mainGame");
  let rendererOptions = {
    antialiasing: false,
    transparent: false,
    resolution: window.devicePixelRatio,
    autoResize: true,
  };
  let ratio = window.innerWidth / window.innerHeight;
  let app = new PIXI.Application(window.innerWidth, window.innerHeight, {view: mainCanvas}, rendererOptions);
  window.onresize = function(event) {
      resize(app.renderer, ratio);
  };
  return app;
}

function initialiseLoader() {
  soundsLoader();
}

function hidePreloaderAndStartGame() {
  jQuery(".preLoader").fadeOut();
  jQuery("#mainGame").fadeIn();
  initialiseGame();
}

function gameLoader() {
  hidePreloaderAndStartGame();
  gameGlobal.loader.onLoad.add(() => {
    hidePreloaderAndStartGame();
  });
}

function soundsLoader() {
  sleep(100).then((() => {
    isSoundsLoaded();
    if(!gameGlobal.soundsLoaded) {
      soundsLoader();
    } else {
      gameLoader();
    }
  }));
}

function initialiseGame() {
  let ant = getAntSprite(antTypes.fireAnt);

  ant.interactive = true;

  ant.on('pointerdown', (event) => {
    ant.play();
    ant.loop = false;
    ant.onComplete = ant.idle;
  });
  ant.x = 300;
  ant.y = 300;
  gameGlobal.app.stage.addChild(ant);
  preDefinedSounds.entryOfGladiatorsEntry.play();
  gameGlobal.app.ticker.add(function(deltaTime) {
  });
}

function getAnt() {
  let ant = undefined;
  if(randomBoolean()) {
    ant = getAntSprite(antTypes.iceAnt);
  } else {
    ant = getAntSprite(antTypes.fireAnt);
  }
  ant.x = getRandomArbitrary(0, window.innerWidth);
  ant.y = getRandomArbitrary(0, window.innerHeight);
  return ant;
}

function getRandomArbitrary(min, max) {
    return Math.random() * (max - min) + min;
}

function randomBoolean() {
  return Math.random() >= 0.5;
}

function loadAnimateFrame(assetFolder, assetPrefix, assetTime, assetMax, assetMin, viceVersa) {
  viceVersa = (typeof viceVersa === 'undefined') ? false : true;
  let frameSet = [];
  for (let i = assetMin; i <= assetMax; i++){
    let frame = {
        texture: PIXI.Texture.fromImage(`./assets/${assetFolder}/${assetPrefix}_${i}.png`),
        time: assetTime
    };
    frameSet.push(frame);
  }
  if(viceVersa) {
    for (let i = assetMax; i >= assetMin; i--){
      let frame = {
          texture: PIXI.Texture.fromImage(`./assets/${assetFolder}/${assetPrefix}_${i}.png`),
          time: assetTime
      };
      frameSet.push(frame);
    }
  }
  return frameSet;

}

function resize(renderer, ratio) {
    if (window.innerWidth / window.innerHeight >= ratio) {
        var w = window.innerHeight * ratio;
        var h = window.innerHeight;
    } else {
        var w = window.innerWidth;
        var h = window.innerWidth / ratio;
    }
    renderer.view.style.width = w + 'px';
    renderer.view.style.height = h + 'px';
}


function gameEventRecognizer(event) {
  if(event === "ENTRYEND") {
    preDefinedSounds.entryOfGladiatorLooped.play();

    for(var j = 0; j < 100; j++) {
      sleep(getRandomArbitrary(0, 1000)).then(() => {
          gameGlobal.app.stage.addChild(getAnt());
      });
    }

  }
}

function sleep (time) {
  return new Promise((resolve) => setTimeout(resolve, time));
}

function isSoundsLoaded() {
  for(var property in preDefinedSounds) {
    if(preDefinedSounds[property].state() !== 'loaded') {
      gameGlobal.soundsLoaded = false;
    }
  }
  gameGlobal.soundsLoaded = true;
}

const socketConfiguration = {
  url: "ws://approxteam.ddns.net:7777/AntColosseumServer/game",
  onOpen: function(event) {
    initialiseLoader();
  },
  onClose: function(event) {
    console.log(event);
  },
  onMessage: function(event) {
    console.log(event);
  },
  onError: function(event) {
    alert("Please try again later");
  }
};

const globals = {
  webSocket : initSocket(socketConfiguration.url,
   socketConfiguration.onMessage,
   socketConfiguration.onOpen,
   socketConfiguration.onClose,
   socketConfiguration.onError)
};

exports.globals = globals;

return exports;

}({}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
